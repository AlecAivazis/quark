module.exports = [{"section":"form","data":[{"name":"TextInput","section":"form","description":"","code":"// @flow\n// external imports\nimport React from 'react'\nimport { TextInput } from 'react-native'\n// local imports\nimport styles from './styles'\nimport { GetTheme } from 'quark-core'\n\ntype Props = { [key: string]: string }\n\nconst Input = ({ style, ...unused }: Props) => (\n    <GetTheme>\n        {({ grey2, white }) => (\n            <TextInput\n                style={[styles.input, { borderColor: grey2, backgroundColor: white }, style]}\n                {...unused}\n            />\n        )}\n    </GetTheme>\n)\n\nexport default Input\n"}]},{"section":"layout","data":[{"name":"App","section":"layout","description":"","code":"// @flow\n// external imports\nimport React from 'react'\nimport { View, StyleSheet, ViewPropTypes } from 'react-native'\n\nconst App = ({ style, ...unused }: ViewPropTypes) => (\n    <View style={[style, styles.container]} {...unused} />\n)\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1\n    }\n})\n\nexport default App\n"},{"name":"StatusBar","section":"layout","description":"","props":{"style":{"flowType":{"name":"signature","type":"object","raw":"{ [x: string]: any }","signature":{"properties":[{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"required":true,"description":""}},"code":"// @flow\n// external imports\nimport React from 'react'\nimport { View, StatusBar as NativeBar, StyleSheet, Platform } from 'react-native'\n\ntype StatusBarProps = { style: { [x: string]: any } }\n\nconst StatusBar = ({ style, ...unused }: StatusBarProps) => (\n    <NativeBar {...{ ...style, ...styles.container }} {...unused} />\n)\n\n// not using StyleSheet here so we can merge the provided backgroundColor with a default and\n// figure out which to send to the native element\nconst styles = {\n    container: {}\n}\n\nexport default StatusBar\n"}]},{"section":"navigation","data":[{"name":"ZoomViewContainer","section":"navigation","description":"","props":{"children":{"flowType":{"name":"signature","type":"function","raw":"(transitionTo: TransitionHandler) => null","signature":{"arguments":[{"name":"transitionTo","type":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}}}}],"return":{"name":"unknown"}}},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""},"unused":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""},"loading":{"flowType":{"name":"signature","type":"function","raw":"(payload: ViewPayload) => React.Element<any>","signature":{"arguments":[{"name":"payload","type":{"name":"signature","type":"object","raw":"{\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":true}},{"key":"closeView","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"openView","value":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]}}},"required":true,"description":""},"view":{"flowType":{"name":"signature","type":"function","raw":"(payload: ViewPayload) => React.Element<any>","signature":{"arguments":[{"name":"payload","type":{"name":"signature","type":"object","raw":"{\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":true}},{"key":"closeView","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"openView","value":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]}}},"required":true,"description":""}},"code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { StyleSheet, View, Text, Animated } from 'react-native'\n\ntype BoundingBox = {\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}\n\n// we pass the bounding box information inline with the data\ntype BBPayload = BoundingBox & { data?: {} }\n\ntype TransitionHandler = (payload: BBPayload) => void\n\ntype Props = {\n    children: (transitionTo: TransitionHandler) => null,\n    style: {},\n    unused: {},\n    loading: (payload: ViewPayload) => React.Element<any>,\n    view: (payload: ViewPayload) => React.Element<any>\n}\n\ntype State = {\n    showView: boolean,\n    loading: boolean,\n    data: ?{},\n    modal: ?BoundingBox,\n    viewport: ?BoundingBox,\n    origin: ?BoundingBox\n}\n\nexport type ViewPayload = {\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}\n\nconst animationDuration = 150\n\nclass ZoomGridContainer extends React.Component<Props, State> {\n    _root: any\n\n    state = {\n        showView: false,\n        loading: false,\n        data: {},\n        viewport: null,\n        data: null,\n        modal: null,\n        origin: null\n    }\n\n    componentDidMount() {\n        // update the notion of the viewport\n        setTimeout(this._updateRootMeasure, 0)\n    }\n\n    render() {\n        // used props\n        const { children, style, ...unused } = this.props\n        // the payload to pass the view\n        const viewPayload = {\n            data: this.state.data || {},\n            closeView: this._closeView,\n            openView: this._openView\n        }\n        return (\n            <View style={[styles.container, style]} ref={ele => (this._root = ele)}>\n                {children(this._openView)}\n                {this.state.showView &&\n                    this.state.modal && (\n                        <Animated.View\n                            style={{\n                                width: this.state.modal.width,\n                                height: this.state.modal.height,\n                                top: this.state.modal.x,\n                                left: this.state.modal.y,\n                                display: 'flex',\n                                flexDirection: 'row',\n                                position: 'absolute',\n                                backgroundColor: 'white'\n                            }}\n                        >\n                            {this.state.loading\n                                ? this.props.loading(viewPayload)\n                                : this.props.view(viewPayload)}\n                        </Animated.View>\n                    )}\n            </View>\n        )\n    }\n\n    _openView = ({ data, ...origin }: BBPayload): void => {\n        // grab the used state\n        const { viewport } = this.state\n        // if we haven't computed the viewport yet\n        if (!viewport) {\n            // don't do anything for now\n            // TODO: wait to compute and then execute\n            return\n        }\n\n        // shift the origin to accomodate the viewport\n        const relOrigin = {\n            x: origin.x - viewport.x,\n            y: origin.y - viewport.y,\n            height: origin.height - viewport.height,\n            width: origin.width - viewport.width\n        }\n\n        // save the user's provided data\n        this.setState(\n            {\n                data,\n                origin: relOrigin,\n                showView: true,\n                loading: true,\n                modal: {\n                    x: new Animated.Value(origin.x),\n                    y: new Animated.Value(origin.y),\n                    width: new Animated.Value(origin.width),\n                    height: new Animated.Value(origin.height)\n                }\n            },\n            () => {\n                const { viewport, modal } = this.state\n                // if we haven't computed the viewport yet\n                if (!viewport || !modal) {\n                    // don't do anything for now\n                    // TODO: wait to compute and then execute\n                    return\n                }\n\n                Animated.parallel([\n                    Animated.timing(modal.width, {\n                        toValue: viewport.width,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.height, {\n                        toValue: viewport.height,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.x, {\n                        toValue: 0,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.y, {\n                        toValue: 0,\n                        duration: animationDuration\n                    })\n                ]).start(() => this.setState({ loading: false }))\n            }\n        )\n    }\n\n    _closeView = () => {\n        this.setState({ loading: true }, () => {\n            const { origin, modal } = this.state\n            // if we haven't computed the origin yet\n            if (!origin || !modal) {\n                // don't do anything for now\n                // TODO: wait to compute and then execute\n                return\n            }\n\n            // we have a few things we need to animate at once\n            Animated.parallel([\n                Animated.timing(modal.width, {\n                    toValue: origin.width,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.height, {\n                    toValue: origin.height,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.x, {\n                    toValue: origin.x,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.y, {\n                    toValue: origin.y,\n                    duration: animationDuration\n                })\n            ]).start(() => this.setState({ showView: false }))\n        })\n    }\n\n    _updateRootMeasure = () => () => {\n        this._root.measure((_, __, width, height, x, y) => {\n            // save the viewport dimensions\n            this.setState({\n                viewport: {\n                    width,\n                    height,\n                    x,\n                    y\n                }\n            })\n        })\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        position: 'relative'\n    }\n})\n\nexport default ZoomGridContainer\n"},{"name":"ZoomViewTrigger","section":"navigation","description":"","props":{"transitionTo":{"flowType":{"name":"signature","type":"function","raw":"(data: any) => void","signature":{"arguments":[{"name":"data","type":{"name":"any"}}],"return":{"name":"void"}}},"required":true,"description":""},"children":{"flowType":{"name":"signature","type":"object","raw":"{ trigger: (data: any) => void }","signature":{"properties":[{"key":"trigger","value":{"name":"signature","type":"function","raw":"(data: any) => void","signature":{"arguments":[{"name":"data","type":{"name":"any"}}],"return":{"name":"void"}},"required":true}}]}},"required":true,"description":""},"unused":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""}},"code":"// external imports\nimport * as React from 'react'\nimport { View } from 'react-native'\n\ntype Props = {\n    transitionTo: (data: any) => void,\n    children: { trigger: (data: any) => void },\n    unused: {}\n}\n\nclass ZoomViewTrigger extends React.Component<Props> {\n    _ele: React.Component<Props, React.ComponentState>\n\n    render() {\n        return (\n            <View ref={ele => (this._ele = ele)}>\n                {this.props.children({ trigger: this._trigger })}\n            </View>\n        )\n    }\n\n    _trigger = (data: { [key: string]: any }) => {\n        this._ele.measure((_, __, width, height, x, y) => {\n            // this.props.transitionTo(data)\n            this.props.transitionTo({ x, y, width, height, data })\n        })\n    }\n}\n\nexport default ZoomViewTrigger\n"}]},{"section":"overlay","data":[{"name":"Overlay","section":"overlay","description":"","props":{"visible":{"flowType":{"name":"boolean"},"required":true,"description":""},"children":{"flowType":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]},"required":true,"description":""},"toggle":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""}},"code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { Modal, TouchableWithoutFeedback, View } from 'react-native'\nimport { Card } from 'quark-core'\n// local imports\nimport styles from './styles'\n\ntype Props = {\n    visible: boolean,\n    children: React.Element<any>,\n    toggle: () => void\n}\n\nconst Overlay = ({ toggle, children, visible }: Props) =>\n    visible ? (\n        <Modal transparent={true}>\n            {/* the click away */}\n            <TouchableWithoutFeedback onPress={toggle}>\n                <View style={styles.background}>\n                    <Card style={styles.content}>\n                        <TouchableWithoutFeedback>\n                            <View style={{ flex: 1 }}>{children}</View>\n                        </TouchableWithoutFeedback>\n                    </Card>\n                </View>\n            </TouchableWithoutFeedback>\n        </Modal>\n    ) : null\n\nexport default Overlay\n"}]},{"section":"tabs","data":[]}]