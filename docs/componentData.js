module.exports = [{"section":"card","components":[{"name":"CardGrid","packages":["quark-core"],"description":"","props":{"style":{"flowType":{"name":"number"},"required":true,"description":""},"children":{"flowType":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]},"required":true,"description":""},"nCols":{"flowType":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"3","computed":false}},"padding":{"flowType":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"40","computed":false}},"unused":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""}},"code":[{"package":"quark-core","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { ScrollView, View, StyleSheet } from 'react-native'\nimport _ from 'lodash'\n// local imports\nimport CardPlaceholder from './Placeholder'\n\ntype Props = {\n    style: number,\n    children: React.Element<any>,\n    nCols?: number,\n    padding?: number,\n    unused?: {}\n}\n\nconst CardGrid = ({ style, children, nCols = 3, padding = 40, ...unused }: Props) => {\n    // the style for cards\n    const card = {\n        marginBottom: padding,\n        marginRight: padding\n    }\n    // the style of the last card\n    const lastCard = {\n        marginBottom: padding\n    }\n\n    // get the list of children\n    const cards = React.Children.toArray(children)\n\n    return (\n        <ScrollView {...unused} style={[styles.container, style]}>\n            {_.chunk(cards, nCols).map((row, i) => (\n                <View style={styles.row} key={`row-${i}`}>\n                    {row.map((child, i) => {\n                        // the style to apply to the card\n                        const cardStyle = i === row.length - 1 ? lastCard : card\n                        return (\n                            <View style={[styles.card, cardStyle]} key={`card-${i}`}>\n                                {child}\n                            </View>\n                        )\n                    })}\n                    {[...new Array(nCols - row.length)].map((_, i) => (\n                        <CardPlaceholder style={styles.cardWrapper} key={`placeholder-${i}`} />\n                    ))}\n                </View>\n            ))}\n        </ScrollView>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 40\n    },\n    row: {\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n    cardWrapper: {\n        flex: 1,\n        marginRight: 40,\n        marginBottom: 40\n    },\n    card: {\n        flex: 1\n    }\n})\n\nexport default CardGrid\n"}]}]},{"section":"form","components":[{"name":"Dropdown","packages":["quark-web"],"description":"","props":{"children":{"flowType":{"name":"signature","type":"function","raw":"(children: DropdownPayload) => React.Node","signature":{"arguments":[{"name":"children","type":{"name":"signature","type":"object","raw":"{\n    index: number,\n    setIndex: (num: number) => void,\n    toggle: () => void\n}","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"setIndex","value":{"name":"signature","type":"function","raw":"(num: number) => void","signature":{"arguments":[{"name":"num","type":{"name":"number"}}],"return":{"name":"void"}},"required":true}},{"key":"toggle","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"ReactNode","raw":"React.Node"}}},"required":true,"description":""},"toggle":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""},"dropdownStyle":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""},"min":{"flowType":{"name":"number"},"required":false,"description":""},"max":{"flowType":{"name":"number"},"required":false,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { View } from 'react-native-web'\n// local imports\nimport { Portal, ClickAway, Card, Measure, EventListener } from 'quark-web'\nimport type { MeasurePayload } from 'quark-web'\nimport styles from './styles'\n\ntype DropdownPayload = {\n    index: number,\n    setIndex: (num: number) => void,\n    toggle: () => void\n}\n\ntype Props = {\n    children: (children: DropdownPayload) => React.Node,\n    toggle: React.Node,\n    style?: {},\n    dropdownStyle?: {},\n    min?: number,\n    max?: number\n}\n\ntype State = {\n    active: boolean,\n    index: number\n}\n\n// needs to be a class to hold references\nclass Dropdown extends React.Component<Props, State> {\n    _toggle: ?HTMLDivElement\n\n    state = {\n        active: false,\n        index: -1\n    }\n\n    _toggleDropdown = () =>\n        this.setState({\n            active: !this.state.active,\n            index: -1\n        })\n\n    _content = (dimensions: { width: number, height: number, top: number, left: number }) => (\n        <ClickAway\n            active={this.state.active}\n            onClick={this._toggleDropdown}\n            filter={(evt: any) => (this._toggle ? !this._toggle.contains(evt.target) : false)}\n        >\n            <Card\n                style={{\n                    ...styles.dropdown,\n                    position: 'fixed',\n                    left: dimensions.left,\n                    width: dimensions.width,\n                    top: dimensions.top + dimensions.height,\n                    ...this.props.dropdownStyle\n                }}\n            >\n                {this.props.children({\n                    index: this.state.index,\n                    setIndex: index => this.setState({ index }),\n                    toggle: this._toggleDropdown\n                })}\n            </Card>\n        </ClickAway>\n    )\n\n    _keyDown = (event: Event) => {\n        // if the user pressed ↑\n        if (event.which === 38) {\n            event.preventDefault()\n            // increment the counter\n            this.setState({\n                // make sure we're always over the minimum\n                index: Math.max(this.state.index - 1, this.props.min || 0)\n            })\n            // otherwise if the user pressed ↓\n        } else if (event.which === 40) {\n            event.preventDefault()\n            // decrement the counter\n            this.setState({\n                // make sure we're always under the maximum value\n                index: Math.min(this.state.index + 1, (this.props.max || Infinity) - 1)\n            })\n        }\n    }\n\n    render() {\n        return [\n            <Measure>\n                {({ measureRef, ...dimensions }) => (\n                    <View style={{ ...styles.anchor, ...this.props.style }}>\n                        <div\n                            onClick={this._toggleDropdown}\n                            ref={ele => {\n                                this._toggle = ele\n                                measureRef(ele)\n                            }}\n                            style={styles.toggle}\n                        >\n                            {this.props.toggle}\n                        </div>\n                        {this.state.active && (\n                            <Portal id=\"dropdown\">{this._content(dimensions)}</Portal>\n                        )}\n                    </View>\n                )}\n            </Measure>,\n            this.state.active && (\n                <EventListener event=\"keydown\" key=\"events\">\n                    {this._keyDown}\n                </EventListener>\n            )\n        ]\n    }\n}\n\nexport default Dropdown\n"}]},{"name":"Input","packages":["quark-web"],"description":"","props":{"value":{"flowType":{"name":"string"},"required":true,"description":""},"onChange":{"flowType":{"name":"signature","type":"function","raw":"(str: string, evt: Event) => void","signature":{"arguments":[{"name":"str","type":{"name":"string"}},{"name":"evt","type":{"name":"Event"}}],"return":{"name":"void"}}},"required":true,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { View, TextInput, StyleSheet } from 'react-native-web'\nimport { GetTheme, BooleanState } from 'quark-web'\n// local imports\nimport styles from './styles'\n\ntype Props = {\n    value: string,\n    onChange: (str: string, evt: Event) => void\n} & { [key: string]: string }\n\nconst Input = ({ value, onChange, error, style, ...unused }: Props) => (\n    <BooleanState>\n        {({ state: focused, toggle: toggleFocus }) => (\n            <GetTheme>\n                {({ grey3, grey2, primaryColor }) => {\n                    // the style to apply to the element\n                    const containerStyle = {\n                        ...styles.container\n                    }\n\n                    // if we are focused\n                    if (focused) {\n                        Object.assign(containerStyle, {\n                            borderColor: primaryColor\n                        })\n                    } else {\n                        Object.assign(containerStyle, {\n                            borderColor: grey2\n                        })\n                    }\n\n                    // render a stylable input\n                    return (\n                        <View style={[containerStyle, style]}>\n                            <TextInput\n                                {...unused}\n                                onFocus={toggleFocus}\n                                onBlur={toggleFocus}\n                                value={value || ''}\n                                placeholderTextColor={grey3}\n                                onChange={onChange ? evt => onChange(evt.target.value, evt) : null}\n                                style={styles.input}\n                            />\n                        </View>\n                    )\n                }}\n            </GetTheme>\n        )}\n    </BooleanState>\n)\n\nexport default Input\n"}]},{"name":"Option","packages":["quark-web"],"description":"","props":{"value":{"flowType":{"name":"union","raw":"string | number | Boolean","elements":[{"name":"string"},{"name":"number"},{"name":"Boolean"}]},"required":true,"description":""},"active":{"flowType":{"name":"boolean"},"required":true,"description":""},"selected":{"flowType":{"name":"boolean"},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { Text } from 'quark-web'\n// local imports\nimport { GetTheme } from 'quark-core'\nimport styles from './styles'\n\nexport type OptionValue = string | number | Boolean\n\ntype Props = {\n    value: OptionValue,\n    active: boolean,\n    selected: boolean,\n    style: {}\n}\n\nconst Option = ({ value, active, selected, style, ...unused }: Props) => (\n    <GetTheme>\n        {({ primaryColor, grey1 }) => {\n            // the style to apply to the element\n            let elementStyle = { ...styles.container }\n            if (active) {\n                Object.assign(elementStyle, styles.active, {\n                    backgroundColor: grey1\n                })\n            }\n            if (selected) {\n                Object.assign(elementStyle, styles.selected, {\n                    color: primaryColor\n                })\n            }\n\n            return (\n                <Text>\n                    <div style={{ ...elementStyle, ...style }} {...unused} />\n                </Text>\n            )\n        }}\n    </GetTheme>\n)\n\nexport default Option\n"}]},{"name":"Select","packages":["quark-web"],"description":"","props":{"value":{"flowType":{"name":"OptionValue"},"required":true,"description":""},"placeholder":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"children":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"onChange":{"flowType":{"name":"signature","type":"function","raw":"(val: OptionValue) => void","signature":{"arguments":[{"name":"val","type":{"name":"OptionValue"}}],"return":{"name":"void"}}},"required":false,"description":""},"toggleStyle":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { View } from 'react-native-web'\n// local imports\nimport { Dropdown } from '..'\nimport styles from './styles'\nimport type { OptionValue } from '../Option'\nimport { Text, EventListener, IconChevronDown } from 'quark-web'\n\ntype Props = {\n    value: OptionValue,\n    placeholder: React.Node,\n    children: React.Node,\n    onChange?: (val: OptionValue) => void,\n    toggleStyle?: {},\n    style?: {}\n}\n\ntype State = {\n    value: ?OptionValue\n}\n\n// needs to be a class to hold references\nclass Select extends React.Component<Props, State> {\n    constructor(props: Props, ...args: any[]) {\n        // instantiate this\n        super(props, ...args)\n        // set the initial state to match the value prop\n        this.state = {\n            value: props.value\n        }\n    }\n\n    render = () => (\n        <Dropdown\n            toggle={this._toggleElement}\n            max={this._options.length}\n            style={{ width: 200, ...this.props.style }}\n            dropdownStyle={{ maxHeight: 280 }}\n        >\n            {({ index: keyIdx, setIndex, toggle }) => [\n                ...this._children.map((child, optionIdx) => {\n                    // grab any previously defined onClick handlers\n                    const onClick = child.props.onClick || (() => {})\n                    const onMouseOver = child.props.onMouseOver || (() => {})\n                    // add the required event handlers and props to the option\n                    return React.cloneElement(child, {\n                        key: child.props.value,\n                        active: keyIdx === optionIdx,\n                        selected: this.state.value === child.props.value,\n                        onMouseOver: (evt: Event) => {\n                            onMouseOver(evt)\n                            setIndex(optionIdx)\n                        },\n                        onClick: (evt: Event) => {\n                            onClick(evt)\n                            this._onChange({ index: optionIdx, toggle })\n                        }\n                    })\n                }),\n                <EventListener\n                    event=\"keydown\"\n                    filter={(evt: any) => evt.which === 13}\n                    key=\"event-listener\"\n                >\n                    {(evt: Event) => {\n                        // prevent unwanted bubbling\n                        evt.preventDefault()\n\n                        // we're done\n                        this._onChange({\n                            index: keyIdx,\n                            toggle\n                        })\n                    }}\n                </EventListener>\n            ]}\n        </Dropdown>\n    )\n\n    _onChange = ({ toggle, index }: { index: number, toggle: () => void }) => {\n        // the value of the appropriate option\n        const { value } = this._options[index].props\n\n        // if there is a callback to trigger\n        if (this.props.onChange) {\n            // pass the value to the parent\n            this.props.onChange(value)\n        }\n        // if there is no value prop then update the component state\n        if (typeof this.props.value === 'undefined' || this.props.value === 'null') {\n            // save the value\n            this.setState({ value })\n        }\n\n        // close the dropdown\n        toggle()\n    }\n\n    get _toggleElement() {\n        // the content of the toggle element\n        let content\n\n        // find the child we have selected\n        let selectedChild = this._options.find(child => child.props.value === this.state.value)\n        // if we dont have a value to show or couldn't find a matching child\n        if (!this.props.value || !selectedChild) {\n            // return null if we have a placeholder, otherwise the first child is selected\n            content = this.props.placeholder || this._children[0].props.children\n        } else {\n            content = selectedChild.props.children\n        }\n\n        return (\n            <View style={{ ...styles.toggle, ...this.props.toggleStyle }}>\n                <Text style={{ marginRight: 4 }}>{content}</Text>\n                <IconChevronDown />\n            </View>\n        )\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        // if the value has changed\n        if (nextProps.value !== this.state.value) {\n            // update the internal tracker\n            this.setState({ value: nextProps.value })\n        }\n    }\n\n    // the list of options in the select\n    get _options() {\n        return this._children\n    }\n\n    // the flat list of options\n    get _children() {\n        return React.Children.toArray(this.props.children)\n    }\n}\n\nexport default Select\n"}]},{"name":"TextInput","packages":["quark-native"],"description":"","code":[{"package":"quark-native","code":"// @flow\n// external imports\nimport React from 'react'\nimport { TextInput } from 'react-native'\n// local imports\nimport styles from './styles'\nimport { GetTheme } from 'quark-core'\n\ntype Props = { [key: string]: string }\n\nconst Input = ({ style, ...unused }: Props) => (\n    <GetTheme>\n        {({ grey2, white }) => (\n            <TextInput\n                style={[styles.input, { borderColor: grey2, backgroundColor: white }, style]}\n                {...unused}\n            />\n        )}\n    </GetTheme>\n)\n\nexport default Input\n"}]}]},{"section":"layout","components":[{"name":"App","packages":["quark-web","quark-native"],"description":"","code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport type { ViewPropTypes } from 'react-native-web'\n\nconst App = ({ style, ...unused }: ViewPropTypes) => (\n    <View style={[style, styles.container]} {...unused} />\n)\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'auto'\n    }\n})\n\nexport default App\n"},{"package":"quark-native","code":"// @flow\n// external imports\nimport React from 'react'\nimport { View, StyleSheet, ViewPropTypes } from 'react-native'\n\nconst App = ({ style, ...unused }: ViewPropTypes) => (\n    <View style={[style, styles.container]} {...unused} />\n)\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1\n    }\n})\n\nexport default App\n"}]},{"name":"StatusBar","packages":["quark-native"],"description":"","props":{"style":{"flowType":{"name":"signature","type":"object","raw":"{ [x: string]: any }","signature":{"properties":[{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"required":true,"description":""}},"code":[{"package":"quark-native","code":"// @flow\n// external imports\nimport React from 'react'\nimport { View, StatusBar as NativeBar, StyleSheet, Platform } from 'react-native'\n\ntype StatusBarProps = { style: { [x: string]: any } }\n\nconst StatusBar = ({ style, ...unused }: StatusBarProps) => (\n    <NativeBar {...{ ...style, ...styles.container }} {...unused} />\n)\n\n// not using StyleSheet here so we can merge the provided backgroundColor with a default and\n// figure out which to send to the native element\nconst styles = {\n    container: {}\n}\n\nexport default StatusBar\n"}]}]},{"section":"state","components":[{"name":"Boolean","packages":["quark-core"],"description":"","props":{"children":{"type":{"name":"func"},"required":true,"description":""}},"code":[{"package":"quark-core","code":"// external imports\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// local imports\nimport FreeState from '../Free'\n\nconst BooleanState = ({ children, ...unused }) => (\n    <FreeState {...unused}>\n        {({ state, set }) =>\n            React.Children.only(\n                children({\n                    state,\n                    set: val => set(Boolean(val)),\n                    toggle: () => set(!state)\n                })\n            )}\n    </FreeState>\n)\n\nBooleanState.propTypes = {\n    children: PropTypes.func.isRequired\n}\n\nexport default BooleanState\n"}]},{"name":"Cycle","packages":["quark-core"],"description":"","props":{"items":{"flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"required":true,"description":""},"children":{"flowType":{"name":"signature","type":"function","raw":"(payload: CyclePayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"signature","type":"object","raw":"{\n    item: any,\n    index: number,\n    next: () => void,\n    previous: () => void,\n    goTo: (num: number) => void\n}","signature":{"properties":[{"key":"item","value":{"name":"any","required":true}},{"key":"index","value":{"name":"number","required":true}},{"key":"next","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"previous","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"goTo","value":{"name":"signature","type":"function","raw":"(num: number) => void","signature":{"arguments":[{"name":"num","type":{"name":"number"}}],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"void"}}},"required":true,"description":""},"interval":{"flowType":{"name":"number"},"required":true,"description":""},"active":{"flowType":{"name":"boolean"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}},"code":[{"package":"quark-core","code":"// @flow\n// external imports\nimport * as React from 'react'\n// local imports\nimport { Interval } from '../../timing'\n\ntype CyclePayload = {\n    item: any,\n    index: number,\n    next: () => void,\n    previous: () => void,\n    goTo: (num: number) => void\n}\n\ntype Props = {\n    items: any[],\n    children: (payload: CyclePayload) => void,\n    interval: number,\n    active: boolean\n}\n\ntype State = {\n    index: number,\n    incrementCount: number\n}\n\nclass Cycle extends React.Component<Props, State> {\n    static defaultProps = {\n        active: true\n    }\n\n    state = {\n        index: 0,\n        incrementCount: 0\n    }\n\n    render = () => (\n        <React.Fragment>\n            {this.props.active && (\n                <Interval interval={this.props.interval} key={this.state.incrementCount}>\n                    {this._next(false)}\n                </Interval>\n            )}\n            {this.props.children({\n                item: this.props.items[this.state.index],\n                index: this.state.index,\n                next: this._next(true),\n                previous: this._prev,\n                goTo: this._goTo\n            })}\n        </React.Fragment>\n    )\n\n    componentWillReceiveProps = ({ items: items1 }: Props) => {\n        // grab the current list of items\n        const { items: items2 } = this.props\n        // check if the items are the same\n        if (JSON.stringify(items1) !== JSON.stringify(items2)) {\n            // reset the cycle to the first element\n            this._goTo(0)\n            // bump the increment count to reset the interval\n            this.setState(({ incrementCount }) => ({ incrementCount: incrementCount + 1 }))\n        }\n    }\n\n    _next = (increment: boolean) => (): void =>\n        this.setState(({ index, incrementCount }) => ({\n            index: index === this.props.items.length - 1 ? 0 : index + 1,\n            incrementCount: incrementCount + 1\n        }))\n\n    _prev = (): void =>\n        this.setState(({ index, incrementCount }) => ({\n            index: index === 0 ? this.props.items.length - 1 : index - 1,\n            incrementCount: incrementCount + 1\n        }))\n\n    _goTo = (index: number): void =>\n        this.setState(({ incrementCount }) => ({\n            index,\n            incrementCount: incrementCount + 1\n        }))\n}\n\nexport default Cycle\n"}]},{"name":"Form","packages":["quark-core"],"description":"","props":{"children":{"type":{"name":"func"},"required":true,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""},"validate":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"transform":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"value":{"type":{"name":"object"},"required":false,"description":""},"initialErrors":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"initialData":{"type":{"name":"object"},"required":false,"description":""}},"code":[{"package":"quark-core","code":"// external imports\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport lodash from 'lodash'\n\nclass Form extends React.Component {\n    static propTypes = {\n        children: PropTypes.func.isRequired,\n        onChange: PropTypes.func,\n        validate: PropTypes.object,\n        transform: PropTypes.object,\n        value: PropTypes.object,\n        initialErrors: PropTypes.bool,\n        initialData: PropTypes.object\n    }\n\n    static defaultProps = {\n        validate: {},\n        transform: {},\n        initialErrors: false\n    }\n\n    render() {\n        // figure out the child we should show\n        const child = this.props.children({\n            getValue: this._getValue,\n            setValue: this._updateValue,\n            getError: this._getErrors,\n            data: this.state.data,\n            hasErrors: this._hasErrors,\n            clear: this._clear\n        })\n\n        // if the child is not a valid element\n        if (!React.isValidElement(child)) {\n            // yell loudly\n            throw new Error('Child of Form must return a valid react element.')\n        }\n\n        return child\n    }\n\n    // A field counts as having been updated if it had initial data\n    _isUpdated = key =>\n        this.state._updated[key] ||\n        (this.props.initialData &&\n            (this.props.initialData[key] !== null &&\n                typeof this.props.initialData[key] !== 'undefined'))\n\n    get _hasErrors() {\n        return (\n            Object.values(this.state.errors).filter(\n                err => (Array.isArray(err) ? err.length > 0 : err)\n            ).length > 0\n        )\n    }\n\n    _updateValue = newValues => {\n        // the state after updating the value\n        const state = { ...this.state }\n        // for each value we want to change\n        for (const key of Object.keys(newValues)) {\n            // grab the transform if it exists\n            const transform = this.props.transform[key] || (str => str)\n            // and apply it to the new value and update the key to the value\n            state.data[key] = transform(newValues[key])\n            state._updated = {\n                ...state._updated,\n                [key]: true\n            }\n        }\n\n        // Run validation over all the fields if one exists for the field\n        for (const key of Object.keys(this.props.validate)) {\n            // Pass the updated and transformed value onto the validator and store the error result\n            // Also pass all of the current values if the validator needs to validate based on other values\n            state.errors[key] = this.props.validate[key](state.data[key], state.data)\n        }\n        // update the component state\n        this.setState(state, () => {\n            // if we have an onchange handler to call\n            if (this.props.onChange) {\n                // pass the form data to the handler\n                this.props.onChange(this.state.data)\n            }\n        })\n    }\n\n    _getValue = key => {\n        return this.state.data[key]\n    }\n\n    _getErrors = key => {\n        // if we aren't supposed to calculate initial errors and we haven't been updated\n        if (!this.props.initialErrors && !this._isUpdated(key)) {\n            // return the empty error value\n            return null\n        }\n\n        return this.state.errors[key] || null\n    }\n\n    _resetStates(resetData) {\n        const initialData = resetData || this.props.initialData || this.props.value || {}\n        return {\n            _updated: {},\n            data: { ...initialData },\n            // we could start off with errors\n            errors: lodash.mapValues(\n                this.props.validate,\n                // if the validator doesn't like empty strings\n                (validator, key) => validator(initialData[key] || '', initialData)\n            )\n        }\n    }\n\n    _clear = resetData => {\n        this.setState(this._resetStates(resetData))\n    }\n\n    _didValueUpdate = (newValue, oldValue) =>\n        (newValue && !oldValue) || JSON.stringify(newValue) !== JSON.stringify(oldValue)\n\n    componentWillReceiveProps(nextProps) {\n        const { value: newValue, initialData: newInitialData } = nextProps\n        const { value: oldValue, initialData: oldInitialData } = this.props\n        // if we were given a new value or initial data\n        if (newInitialData && this._didValueUpdate(newInitialData, oldInitialData)) {\n            this._clear(newInitialData)\n        }\n        // value have the last say\n        if (newValue && this._didValueUpdate(newValue, oldValue)) {\n            // update the internal tracker\n            this._updateValue(newValue)\n        }\n    }\n\n    constructor(props, ...args) {\n        super(props, ...args)\n\n        this.state = this._resetStates()\n    }\n}\n\nexport default Form\n"}]},{"name":"Free","packages":["quark-core"],"description":"","props":{"children":{"type":{"name":"func"},"required":true,"description":""},"initial":{"type":{"name":"any"},"required":false,"description":"","defaultValue":{"value":"null","computed":false}}},"code":[{"package":"quark-core","code":"// external imports\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass FreeState extends Component {\n    static propTypes = {\n        children: PropTypes.func.isRequired,\n        initial: PropTypes.any\n    }\n\n    static defaultProps = {\n        initial: null\n    }\n\n    constructor(props, ...args) {\n        // create this\n        super(props, ...args)\n        // base the state on the initial prop\n        this.state = {\n            val: props.initial\n        }\n    }\n\n    render() {\n        return this.props.children({\n            state: this.state.val,\n            set: val => this.setState({ val })\n        })\n    }\n}\n\nexport default FreeState\n"}]},{"name":"List","packages":["quark-core"],"description":"","props":{"children":{"type":{"name":"func"},"required":true,"description":""},"initial":{"type":{"name":"array"},"required":false,"description":"","defaultValue":{"value":"[]","computed":false}}},"code":[{"package":"quark-core","code":"// external imports\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// local imports\nimport FreeState from '../Free'\n\nexport const updateList = (list, i, val) => {\n    const copy = [...list]\n    copy[i] = val\n    return copy\n}\n\nconst ListState = ({ children, ...unused }) => (\n    <FreeState {...unused}>\n        {({ state, set }) =>\n            React.Children.only(\n                children({\n                    state,\n                    append: val => set([...state, val]),\n                    prepend: val => set([val, ...state]),\n                    slice: (...args) => set(state.slice(...args)),\n                    update: (...args) => set(updateList(state, ...args))\n                })\n            )\n        }\n    </FreeState>\n)\n\nListState.propTypes = {\n    children: PropTypes.func.isRequired,\n    initial: PropTypes.array\n}\n\nListState.defaultProps = {\n    initial: []\n}\n\nexport default ListState\n"}]}]},{"section":"theme","components":[{"name":"Theme","packages":["quark-core"],"description":"","props":{"children":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"theme":{"flowType":{"name":"signature","type":"object","raw":"{\n    primaryColor?: Color,\n    primaryColorLight?: Color,\n    primaryColorDark?: Color,\n    secondaryColor?: Color,\n    white?: Color,\n    grey1?: Color,\n    grey2?: Color,\n    grey3?: Color,\n    grey4?: Color,\n    grey5?: Color,\n    grey6?: Color,\n    grey7?: Color,\n    grey8?: Color,\n    black?: Color,\n    red?: Color,\n    lightRed?: Color,\n    blue?: Color,\n    lightBlue?: Color,\n    green?: Color,\n    lightGreen?: Color\n}","signature":{"properties":[{"key":"primaryColor","value":{"name":"string","required":false}},{"key":"primaryColorLight","value":{"name":"string","required":false}},{"key":"primaryColorDark","value":{"name":"string","required":false}},{"key":"secondaryColor","value":{"name":"string","required":false}},{"key":"white","value":{"name":"string","required":false}},{"key":"grey1","value":{"name":"string","required":false}},{"key":"grey2","value":{"name":"string","required":false}},{"key":"grey3","value":{"name":"string","required":false}},{"key":"grey4","value":{"name":"string","required":false}},{"key":"grey5","value":{"name":"string","required":false}},{"key":"grey6","value":{"name":"string","required":false}},{"key":"grey7","value":{"name":"string","required":false}},{"key":"grey8","value":{"name":"string","required":false}},{"key":"black","value":{"name":"string","required":false}},{"key":"red","value":{"name":"string","required":false}},{"key":"lightRed","value":{"name":"string","required":false}},{"key":"blue","value":{"name":"string","required":false}},{"key":"lightBlue","value":{"name":"string","required":false}},{"key":"green","value":{"name":"string","required":false}},{"key":"lightGreen","value":{"name":"string","required":false}}]}},"required":true,"description":""}},"code":[{"package":"quark-core","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\n// local imports\nimport {\n    primaryColor,\n    primaryColorLight,\n    primaryColorDark,\n    secondaryColor,\n    white,\n    grey1,\n    grey2,\n    grey3,\n    grey4,\n    grey5,\n    black,\n    red,\n    lightRed,\n    blue,\n    lightBlue,\n    green,\n    lightGreen,\n    yellow,\n    lightYellow\n} from '../../styles'\n// the type that represents a color in the theme\ntype Color = string\n\nexport type Theme = {\n    primaryColor?: Color,\n    primaryColorLight?: Color,\n    primaryColorDark?: Color,\n    secondaryColor?: Color,\n    white?: Color,\n    grey1?: Color,\n    grey2?: Color,\n    grey3?: Color,\n    grey4?: Color,\n    grey5?: Color,\n    grey6?: Color,\n    grey7?: Color,\n    grey8?: Color,\n    black?: Color,\n    red?: Color,\n    lightRed?: Color,\n    blue?: Color,\n    lightBlue?: Color,\n    green?: Color,\n    lightGreen?: Color\n}\n\nexport const defaultTheme = {\n    primaryColor,\n    primaryColorLight,\n    primaryColorDark,\n    secondaryColor,\n    white,\n    grey1,\n    grey2,\n    grey3,\n    grey4,\n    grey5,\n    black,\n    red,\n    lightRed,\n    blue,\n    lightBlue: lightBlue,\n    green,\n    lightGreen: lightGreen\n}\n\ntype Props = {\n    children: React.Node,\n    theme: Theme\n}\n\nclass ThemeProvider extends React.Component<Props> {\n    static childContextTypes = {\n        theme: PropTypes.object\n    }\n\n    getChildContext() {\n        return {\n            theme: {\n                ...defaultTheme,\n                ...this.props.theme\n            }\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\nexport default ThemeProvider\n"}]}]},{"section":"timing","components":[{"name":"Interval","packages":["quark-core"],"description":"","props":{"children":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"interval":{"flowType":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"5000","computed":false}}},"code":[{"package":"quark-core","code":"// @flow\n// external imports\nimport React from 'react'\n\nexport type IntervalProps = {\n    children: () => void,\n    interval: number\n}\n\ntype State = {\n    interval: number\n}\n\nclass Interval extends React.Component<IntervalProps, State> {\n    state = {\n        interval: 0\n    }\n\n    static defaultProps = {\n        interval: 5000\n    }\n\n    componentDidMount = () =>\n        this.setState({ interval: setInterval(this.props.children, this.props.interval) })\n\n    componentWillUnmount = () => clearInterval(this.state.interval)\n\n    render = () => null\n}\n\nexport default Interval\n"}]},{"name":"Timeout","packages":["quark-core"],"description":"","props":{"delay":{"flowType":{"name":"number"},"required":true,"description":""},"children":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""}},"code":[{"package":"quark-core","code":"// @flow\n// external imports\nimport * as React from 'react'\n\ntype Props = {\n    delay: number,\n    children: () => void\n}\n\nclass Timeout extends React.Component<Props> {\n    _timeout = null\n\n    componentDidMount() {\n        this._timeout = setTimeout(this.props.children, this.props.delay)\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this._timeout)\n    }\n\n    // don't render anything\n    render = () => null\n}\n\nexport default Timeout\n"}]}]},{"section":"alerts","components":[{"name":"AlertContainer","packages":["quark-web"],"description":"","props":{"maxAlerts":{"flowType":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"5","computed":false}},"namespace":{"flowType":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'default'","computed":false}}},"code":[{"package":"quark-web","code":"// external imports\nimport * as React from 'react'\nimport { FlexColumn } from 'quark-core'\n// local imports\nimport { QUARK_ALERT } from '../trigger'\nimport { EventListener } from '../../window'\nimport BaseAlert from '../BaseAlert'\nimport SuccessAlert from '../SuccessAlert'\nimport WarningAlert from '../WarningAlert'\nimport type { AlertConfig } from '../trigger'\nimport styles from './styles'\n\ntype Props = {\n    maxAlerts?: number,\n    namespace?: string\n}\n\ntype State = {\n    alerts: Array<AlertConfig>\n}\n\n// the map of alert types to components\nconst alertMap = {\n    warning: WarningAlert,\n    success: SuccessAlert\n}\n\nclass AlertContainer extends React.Component<Props, State> {\n    static defaultProps = {\n        namespace: 'default',\n        maxAlerts: 5\n    }\n\n    state = {\n        alerts: []\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.state.alerts.length > 0 && (\n                    <FlexColumn style={this.props.style}>\n                        <FlexColumn style={styles.contentContainer}>\n                            {this.state.alerts\n                                .slice(0, this.props.maxAlerts)\n                                .map((alert: AlertConfig) => {\n                                    // grab the appropriate kind of alert\n                                    const AlertComponent = alertMap[alert.type] || BaseAlert\n\n                                    // render the right alert\n                                    return (\n                                        <AlertComponent\n                                            key={alert.id}\n                                            {...alert}\n                                            onDismiss={() => this._removeAlert(alert.id)}\n                                        />\n                                    )\n                                })}\n                        </FlexColumn>\n                    </FlexColumn>\n                )}\n                <EventListener event={QUARK_ALERT}>\n                    {({ detail: alert }: { detail: AlertConfig }) => {\n                        // if we received an alert that matches this containers namespace\n                        if (alert.namespace === this.props.namespace) {\n                            // add the alert\n                            this._addAlert(alert)\n                        }\n                    }}\n                </EventListener>\n            </React.Fragment>\n        )\n    }\n\n    // add an alert to the list\n    _addAlert = alert => {\n        // add it to the list\n        this.setState(({ alerts }) => ({\n            alerts: [...alerts, alert]\n        }))\n    }\n\n    // remove an alert from the list\n    _removeAlert = alertId => {\n        // add it to the list\n        this.setState(({ alerts }) => ({\n            alerts: alerts.filter(({ id }) => id !== alertId)\n        }))\n    }\n}\n\nexport default AlertContainer\n"}]},{"name":"BaseAlert","packages":["quark-web"],"description":"","props":{"icon":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"content":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"message":{"flowType":{"name":"string"},"required":true,"description":""},"iconStyle":{"flowType":{"name":"signature","type":"object","raw":"{ [key: string]: any }","signature":{"properties":[{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{ [key: string]: any }","signature":{"properties":[{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"required":true,"description":""},"messageStyle":{"flowType":{"name":"signature","type":"object","raw":"{ [key: string]: any }","signature":{"properties":[{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"required":true,"description":""},"dismissable":{"flowType":{"name":"boolean"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"onDismiss":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { FlexRow, Text, IconX, Timeout, IconInfo, GetTheme } from 'quark-core'\nimport { View, Animated, TouchableWithoutFeedback } from 'react-native-web'\nimport type { FlexViewPropTypes } from 'quark-core'\n// local imports\nimport styles from './styles'\nimport duration from './duration'\n\nexport type AlertProps = {\n    icon: React.Node,\n    content: React.Node,\n    message: string,\n    iconStyle: { [key: string]: any },\n    style: { [key: string]: any },\n    messageStyle: { [key: string]: any },\n    dismissable?: boolean,\n    onDismiss: () => void\n} & FlexViewPropTypes\n\ntype State = {\n    opacity: any,\n    timeout: ?number,\n    marginTop: number\n}\n\nclass BaseAlert extends React.Component<AlertProps, State> {\n    _content: any\n\n    static defaultProps = {\n        dismissable: true\n    }\n\n    state = {\n        opacity: new Animated.Value(0),\n        marginTop: new Animated.Value(-16),\n        timeout: null\n    }\n\n    componentDidMount() {\n        // start the animation\n        Animated.parallel([\n            Animated.timing(this.state.opacity, {\n                toValue: 1,\n                duration: 250\n            }),\n            Animated.timing(this.state.marginTop, {\n                toValue: 0,\n                duration: 250\n            })\n        ]).start()\n\n        // if the alert is dismissable\n        if (this.props.dismissable) {\n            // save a timeout that dismisses the alert\n            this.setState({\n                timeout: setTimeout(this._dismiss, this._delay)\n            })\n        }\n    }\n\n    _dismiss = () => {\n        // clear the dismiss timeout\n        clearTimeout(this.state.timeout)\n\n        // start the animation\n        Animated.parallel([\n            Animated.timing(this.state.opacity, {\n                toValue: 0,\n                duration: 250\n            }),\n            Animated.timing(this.state.marginTop, {\n                toValue: -16,\n                duration: 250\n            })\n        ]).start(this.props.onDismiss)\n    }\n\n    get _delay(): number {\n        return this.props.duration || duration(this._content.textContent)\n    }\n\n    render() {\n        const {\n            icon,\n            content,\n            iconStyle,\n            message,\n            messageStyle,\n            style,\n            dismissable,\n            ...unused\n        } = this.props\n\n        // clean up unused props\n        Reflect.deleteProperty(unused, 'onDismiss')\n\n        // the icon associated with the alert\n        const alertIcon: any = icon || <IconInfo />\n\n        return (\n            <GetTheme>\n                {({ blue }) => (\n                    <Animated.View\n                        style={{\n                            backgroundColor: blue,\n                            opacity: this.state.opacity,\n                            marginTop: this.state.marginTop,\n                            ...styles.container,\n                            ...style\n                        }}\n                        {...unused}\n                    >\n                        <div\n                            onMouseEnter={() => {\n                                clearTimeout(this.state.timeout)\n                                this.setState({ timeout: null })\n                            }}\n                            onMouseLeave={() => {\n                                if (this.props.dismissable) {\n                                    this.setState({\n                                        timeout: setTimeout(this._dismiss, this._delay)\n                                    })\n                                }\n                            }}\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'row',\n                                width: '100%',\n                                height: '100%'\n                            }}\n                        >\n                            <div style={{ marginRight: 20 }}>\n                                {React.cloneElement(alertIcon, { style: styles.iconContainer })}\n                            </div>\n                            <FlexRow alignItems=\"center\" grow={1} style={styles.contentContainer}>\n                                <span ref={ele => (this._content = ele)}>\n                                    {message ? (\n                                        <Text style={{ ...styles.messageStyle, ...messageStyle }}>\n                                            {message}\n                                        </Text>\n                                    ) : (\n                                        content\n                                    )}\n                                </span>\n                            </FlexRow>\n                            <div onClick={this._dismiss}>\n                                <IconX style={styles.closeIcon} />\n                            </div>\n                        </div>\n                    </Animated.View>\n                )}\n            </GetTheme>\n        )\n    }\n}\n\nexport default BaseAlert\n"}]},{"name":"SuccessAlert","packages":["quark-web"],"description":"","code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { GetTheme, IconCheckCircle } from 'quark-core'\n// local imports\nimport BaseAlert from '../BaseAlert'\nimport type { AlertProps } from '../BaseAlert'\n\nconst MessageAlert = (props: AlertProps) => (\n    <GetTheme>\n        {({ green }) => (\n            <BaseAlert\n                dismissable={true}\n                style={{ backgroundColor: green }}\n                icon={<IconCheckCircle />}\n                {...props}\n            />\n        )}\n    </GetTheme>\n)\n\nexport default MessageAlert\n"}]},{"name":"WarningAlert","packages":["quark-web"],"description":"","code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { IconAlertTriangle, GetTheme } from 'quark-core'\n// local imports\nimport BaseAlert from '../BaseAlert'\nimport type { AlertProps } from '../BaseAlert'\n\nconst WarningAlert = (props: AlertProps) => (\n    <GetTheme>\n        {({ red }) => (\n            <BaseAlert\n                dismissable={false}\n                style={{ backgroundColor: red }}\n                icon={<IconAlertTriangle />}\n                {...props}\n            />\n        )}\n    </GetTheme>\n)\n\nexport default WarningAlert\n"}]}]},{"section":"overlay","components":[{"name":"Overlay","packages":["quark-web","quark-native"],"description":"","props":{"toggle":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"visible":{"flowType":{"name":"boolean"},"required":true,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { Card, ClickAway, Portal } from 'quark-web'\nimport { View } from 'react-native-web'\nimport type { ViewPropTypes } from 'react-native-web'\n// local imports\nimport styles from './styles'\n\nexport type OverlayProps = {\n    toggle: () => void,\n    visible: boolean\n} & ViewPropTypes\n\nexport const Overlay = ({ toggle, visible, ...unused }: OverlayProps) =>\n    visible ? (\n        <Portal id=\"overlay\" style={styles.container}>\n            <ClickAway onClick={toggle} style={styles.content}>\n                <View {...unused} />\n            </ClickAway>\n        </Portal>\n    ) : null\n"},{"package":"quark-native","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { Modal, TouchableWithoutFeedback, View } from 'react-native'\nimport { Card } from 'quark-core'\n// local imports\nimport styles from './styles'\n\ntype Props = {\n    visible: boolean,\n    children: React.Element<any>,\n    toggle: () => void\n}\n\nconst Overlay = ({ toggle, children, visible }: Props) =>\n    visible ? (\n        <Modal transparent={true}>\n            {/* the click away */}\n            <TouchableWithoutFeedback onPress={toggle}>\n                <View style={styles.background}>\n                    <Card style={styles.content}>\n                        <TouchableWithoutFeedback>\n                            <View style={{ flex: 1 }}>{children}</View>\n                        </TouchableWithoutFeedback>\n                    </Card>\n                </View>\n            </TouchableWithoutFeedback>\n        </Modal>\n    ) : null\n\nexport default Overlay\n"}]}]},{"section":"window","components":[{"name":"ClickAway","packages":["quark-web"],"description":"","props":{"active":{"flowType":{"name":"boolean"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"onClick":{"flowType":{"name":"signature","type":"function","raw":"(evt: Event) => void","signature":{"arguments":[{"name":"evt","type":{"name":"Event"}}],"return":{"name":"void"}}},"required":false,"description":"","defaultValue":{"value":"() => {}","computed":false}},"children":{"flowType":{"name":"ReactNode","raw":"React.Node"},"required":true,"description":""},"event":{"flowType":{"name":"string"},"required":false,"description":""},"filter":{"flowType":{"name":"signature","type":"function","raw":"(evt: Event) => boolean","signature":{"arguments":[{"name":"evt","type":{"name":"Event"}}],"return":{"name":"boolean"}}},"required":false,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\n// local imports\nimport { EventListener } from '.'\n\ntype Props = {\n    active: boolean,\n    onClick: (evt: Event) => void,\n    children: React.Node,\n    event?: string,\n    filter?: (evt: Event) => boolean\n}\n\nclass ClickAway extends React.Component<Props> {\n    _container: ?HTMLSpanElement\n\n    static defaultProps = {\n        active: true,\n        onClick: () => {}\n    }\n\n    _callback = (evt: Event): void => this.props.onClick(evt)\n\n    render() {\n        // grab used props\n        const { active, children, event, onClick, filter, ...unused } = this.props\n\n        const eventFilter = filter || ((evt: Event) => true)\n        // render the component\n        return (\n            <span\n                style={{ display: 'inline-block' }}\n                ref={ele => (this._container = ele)}\n                {...unused}\n            >\n                {children}\n                {active && (\n                    <EventListener event={event || 'mousedown'}>\n                        {(evt: any) =>\n                            this._container &&\n                            !this._container.contains(evt.target) &&\n                            eventFilter(evt) &&\n                            this._callback(evt)\n                        }\n                    </EventListener>\n                )}\n            </span>\n        )\n    }\n}\n\nexport default ClickAway\n"}]},{"name":"EventListener","packages":["quark-web"],"description":"","props":{"event":{"flowType":{"name":"string"},"required":true,"description":""},"children":{"flowType":{"name":"signature","type":"function","raw":"(evt: Event) => any","signature":{"arguments":[{"name":"evt","type":{"name":"Event"}}],"return":{"name":"any"}}},"required":true,"description":""},"filter":{"flowType":{"name":"signature","type":"function","raw":"(evt: Event) => boolean","signature":{"arguments":[{"name":"evt","type":{"name":"Event"}}],"return":{"name":"boolean"}}},"required":false,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport PropTypes from 'prop-types'\nimport * as React from 'react'\n\ntype Props = {\n    event: string,\n    children: (evt: Event) => any,\n    filter?: (evt: Event) => boolean\n}\n\nclass EventHandler extends React.Component<Props> {\n    _onEvent = (evt: Event) => this._filter(evt) && this.props.children(evt)\n\n    componentDidMount() {\n        window.addEventListener(this.props.event, this._onEvent)\n    }\n\n    componentWillReceiveProps() {\n        // remove the old event listener\n        window.removeEventListener(this.props.event, this._onEvent)\n        // and add the new one\n        window.addEventListener(this.props.event, this._onEvent)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(this.props.event, this._onEvent)\n    }\n\n    render() {\n        return null\n    }\n\n    // default props\n    get _filter(): (evt: Event) => boolean {\n        return this.props.filter || (evt => true)\n    }\n}\n\nexport default EventHandler\n"}]},{"name":"Measure","packages":["quark-web"],"description":"","props":{"children":{"flowType":{"name":"signature","type":"function","raw":"(vals: MeasurePayload) => React.Node","signature":{"arguments":[{"name":"vals","type":{"name":"intersection","raw":"BoundingBox & {\n    measureRef: (any: any) => void\n}","elements":[{"name":"signature","type":"object","raw":"{\n    height: number,\n    width: number,\n    left: number,\n    top: number\n}","signature":{"properties":[{"key":"height","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"left","value":{"name":"number","required":true}},{"key":"top","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{\n    measureRef: (any: any) => void\n}","signature":{"properties":[{"key":"measureRef","value":{"name":"signature","type":"function","raw":"(any: any) => void","signature":{"arguments":[{"name":"any","type":{"name":"any"}}],"return":{"name":"void"}},"required":true}}]}}]}}],"return":{"name":"ReactNode","raw":"React.Node"}}},"required":true,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\n\ntype Props = {\n    children: (vals: MeasurePayload) => React.Node\n}\n\ntype State = {\n    node: ?HTMLElement,\n    lastDimensions: ?BoundingBox,\n    dimensions: BoundingBox,\n    running: boolean\n}\n\ntype BoundingBox = {\n    height: number,\n    width: number,\n    left: number,\n    top: number\n}\n\nexport type MeasurePayload = BoundingBox & {\n    measureRef: (any: any) => void\n}\n\nclass Measure extends React.Component<Props, State> {\n    // track if the instance is mounted\n    _mounted: boolean\n\n    state = {\n        node: null,\n        running: false,\n        lastDimensions: null,\n        dimensions: {\n            height: -1,\n            width: -1,\n            left: -1,\n            top: -1\n        }\n    }\n\n    _updateDimensions = () => {\n        // guards\n        if (!this.state.node || !this._mounted) {\n            return\n        }\n\n        // grab the location of the node\n        const current = this.state.node.getBoundingClientRect()\n        // and the last we knew about it\n        const last = this.state.lastDimensions\n\n        if (!last) {\n            return\n        }\n        // if the scroll height has changed\n        if (\n            this.state.dimensions.top === -1 ||\n            current.top !== last.top ||\n            current.left !== last.left ||\n            current.width !== last.width ||\n            current.height !== last.height\n        ) {\n            // update the component state\n            this.setState({\n                lastDimensions: current,\n                dimensions: {\n                    height: current.height,\n                    width: current.width,\n                    top: current.top,\n                    left: current.left\n                }\n            })\n        }\n        // we're done here so keep updating\n        requestAnimationFrame(this._updateDimensions)\n    }\n\n    _ref = (node: HTMLElement) => {\n        // if we are attaching the node for the first time\n        if (!this.state.node) {\n            // save the node in state\n            this.setState(\n                { node, running: true, lastDimensions: node.getBoundingClientRect() },\n                // start updating the position of the element when we've saved the current value\n                this._updateDimensions\n            )\n        }\n    }\n\n    // gross hack to terminate the animation frame when this unmounts\n    componentDidMount() {\n        this._mounted = true\n    }\n    componentWillUnmount() {\n        this._mounted = false\n    }\n\n    render = () => {\n        return this.props.children({\n            measureRef: this._ref,\n            ...this.state.dimensions\n        })\n    }\n}\n\nexport default Measure\n"}]},{"name":"Portal","packages":["quark-web"],"description":"","props":{"id":{"flowType":{"name":"string"},"required":true,"description":""},"children":{"flowType":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":false,"description":""}},"code":[{"package":"quark-web","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\n\ntype Props = {\n    id: string,\n    children: React.Element<any>,\n    style?: {}\n}\n\ntype State = {\n    element: ?HTMLElement\n}\n\nclass WithPortal extends React.Component<Props, State> {\n    state = {\n        element: null\n    }\n\n    componentDidMount() {\n        // look for an element with the designated id\n        let element = document.getElementById(this._portalID)\n        // the style to apply to the portal container\n        let elementStyle = this.props.style || {}\n\n        // if the element doesn't exist\n        if (!element) {\n            // create a new element\n            element = document.createElement('div')\n            // make sure there's only one\n            element.id = this._portalID\n            // append the element to the DOM\n            document.getElementsByTagName('body')[0].appendChild(element)\n        }\n\n        // apply any styles\n        Object.keys(elementStyle).forEach(\n            style => element && element.style.setProperty(style, elementStyle[style])\n        )\n\n        // save the element in the component's state\n        this.setState({ element })\n    }\n\n    componentWillUnmount() {\n        if (this.state.element) {\n            // remove the styling on the element\n            this.state.element.setAttribute('style', '')\n        }\n    }\n\n    get _portalID(): string {\n        return this.props.id ? `portal-${this.props.id}` : 'portal'\n    }\n\n    render = () => {\n        return this.state.element && ReactDOM.createPortal(this.props.children, this.state.element)\n    }\n}\n\nexport default WithPortal\n"}]}]},{"section":"navigation","components":[{"name":"ZoomViewContainer","packages":["quark-native"],"description":"","props":{"children":{"flowType":{"name":"signature","type":"function","raw":"(transitionTo: TransitionHandler) => null","signature":{"arguments":[{"name":"transitionTo","type":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}}}}],"return":{"name":"unknown"}}},"required":true,"description":""},"style":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""},"unused":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""},"loading":{"flowType":{"name":"signature","type":"function","raw":"(payload: ViewPayload) => React.Element<any>","signature":{"arguments":[{"name":"payload","type":{"name":"signature","type":"object","raw":"{\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":true}},{"key":"closeView","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"openView","value":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]}}},"required":true,"description":""},"view":{"flowType":{"name":"signature","type":"function","raw":"(payload: ViewPayload) => React.Element<any>","signature":{"arguments":[{"name":"payload","type":{"name":"signature","type":"object","raw":"{\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":true}},{"key":"closeView","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"openView","value":{"name":"signature","type":"function","raw":"(payload: BBPayload) => void","signature":{"arguments":[{"name":"payload","type":{"name":"intersection","raw":"BoundingBox & { data?: {} }","elements":[{"name":"signature","type":"object","raw":"{\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}","signature":{"properties":[{"key":"x","value":{"name":"number","required":true}},{"key":"y","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}}]}},{"name":"signature","type":"object","raw":"{ data?: {} }","signature":{"properties":[{"key":"data","value":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]},"required":false}}]}}]}}],"return":{"name":"void"}},"required":true}}]}}}],"return":{"name":"ReactElement","raw":"React.Element<any>","elements":[{"name":"any"}]}}},"required":true,"description":""}},"code":[{"package":"quark-native","code":"// @flow\n// external imports\nimport * as React from 'react'\nimport { StyleSheet, View, Text, Animated } from 'react-native'\n\ntype BoundingBox = {\n    x: number,\n    y: number,\n    width: number,\n    height: number\n}\n\n// we pass the bounding box information inline with the data\ntype BBPayload = BoundingBox & { data?: {} }\n\ntype TransitionHandler = (payload: BBPayload) => void\n\ntype Props = {\n    children: (transitionTo: TransitionHandler) => null,\n    style: {},\n    unused: {},\n    loading: (payload: ViewPayload) => React.Element<any>,\n    view: (payload: ViewPayload) => React.Element<any>\n}\n\ntype State = {\n    showView: boolean,\n    loading: boolean,\n    data: ?{},\n    modal: ?BoundingBox,\n    viewport: ?BoundingBox,\n    origin: ?BoundingBox\n}\n\nexport type ViewPayload = {\n    data: {},\n    closeView: () => void,\n    openView: (payload: BBPayload) => void\n}\n\nconst animationDuration = 150\n\nclass ZoomGridContainer extends React.Component<Props, State> {\n    _root: any\n\n    state = {\n        showView: false,\n        loading: false,\n        data: {},\n        viewport: null,\n        data: null,\n        modal: null,\n        origin: null\n    }\n\n    componentDidMount() {\n        // update the notion of the viewport\n        setTimeout(this._updateRootMeasure, 0)\n    }\n\n    render() {\n        // used props\n        const { children, style, ...unused } = this.props\n        // the payload to pass the view\n        const viewPayload = {\n            data: this.state.data || {},\n            closeView: this._closeView,\n            openView: this._openView\n        }\n        return (\n            <View style={[styles.container, style]} ref={ele => (this._root = ele)}>\n                {children(this._openView)}\n                {this.state.showView &&\n                    this.state.modal && (\n                        <Animated.View\n                            style={{\n                                width: this.state.modal.width,\n                                height: this.state.modal.height,\n                                top: this.state.modal.x,\n                                left: this.state.modal.y,\n                                display: 'flex',\n                                flexDirection: 'row',\n                                position: 'absolute',\n                                backgroundColor: 'white'\n                            }}\n                        >\n                            {this.state.loading\n                                ? this.props.loading(viewPayload)\n                                : this.props.view(viewPayload)}\n                        </Animated.View>\n                    )}\n            </View>\n        )\n    }\n\n    _openView = ({ data, ...origin }: BBPayload): void => {\n        // grab the used state\n        const { viewport } = this.state\n        // if we haven't computed the viewport yet\n        if (!viewport) {\n            // don't do anything for now\n            // TODO: wait to compute and then execute\n            return\n        }\n\n        // shift the origin to accomodate the viewport\n        const relOrigin = {\n            x: origin.x - viewport.x,\n            y: origin.y - viewport.y,\n            height: origin.height - viewport.height,\n            width: origin.width - viewport.width\n        }\n\n        // save the user's provided data\n        this.setState(\n            {\n                data,\n                origin: relOrigin,\n                showView: true,\n                loading: true,\n                modal: {\n                    x: new Animated.Value(origin.x),\n                    y: new Animated.Value(origin.y),\n                    width: new Animated.Value(origin.width),\n                    height: new Animated.Value(origin.height)\n                }\n            },\n            () => {\n                const { viewport, modal } = this.state\n                // if we haven't computed the viewport yet\n                if (!viewport || !modal) {\n                    // don't do anything for now\n                    // TODO: wait to compute and then execute\n                    return\n                }\n\n                Animated.parallel([\n                    Animated.timing(modal.width, {\n                        toValue: viewport.width,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.height, {\n                        toValue: viewport.height,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.x, {\n                        toValue: 0,\n                        duration: animationDuration\n                    }),\n                    Animated.timing(modal.y, {\n                        toValue: 0,\n                        duration: animationDuration\n                    })\n                ]).start(() => this.setState({ loading: false }))\n            }\n        )\n    }\n\n    _closeView = () => {\n        this.setState({ loading: true }, () => {\n            const { origin, modal } = this.state\n            // if we haven't computed the origin yet\n            if (!origin || !modal) {\n                // don't do anything for now\n                // TODO: wait to compute and then execute\n                return\n            }\n\n            // we have a few things we need to animate at once\n            Animated.parallel([\n                Animated.timing(modal.width, {\n                    toValue: origin.width,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.height, {\n                    toValue: origin.height,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.x, {\n                    toValue: origin.x,\n                    duration: animationDuration\n                }),\n                Animated.timing(modal.y, {\n                    toValue: origin.y,\n                    duration: animationDuration\n                })\n            ]).start(() => this.setState({ showView: false }))\n        })\n    }\n\n    _updateRootMeasure = () => () => {\n        this._root.measure((_, __, width, height, x, y) => {\n            // save the viewport dimensions\n            this.setState({\n                viewport: {\n                    width,\n                    height,\n                    x,\n                    y\n                }\n            })\n        })\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        position: 'relative'\n    }\n})\n\nexport default ZoomGridContainer\n"}]},{"name":"ZoomViewTrigger","packages":["quark-native"],"description":"","props":{"transitionTo":{"flowType":{"name":"signature","type":"function","raw":"(data: any) => void","signature":{"arguments":[{"name":"data","type":{"name":"any"}}],"return":{"name":"void"}}},"required":true,"description":""},"children":{"flowType":{"name":"signature","type":"object","raw":"{ trigger: (data: any) => void }","signature":{"properties":[{"key":"trigger","value":{"name":"signature","type":"function","raw":"(data: any) => void","signature":{"arguments":[{"name":"data","type":{"name":"any"}}],"return":{"name":"void"}},"required":true}}]}},"required":true,"description":""},"unused":{"flowType":{"name":"signature","type":"object","raw":"{}","signature":{"properties":[]}},"required":true,"description":""}},"code":[{"package":"quark-native","code":"// external imports\nimport * as React from 'react'\nimport { View } from 'react-native'\n\ntype Props = {\n    transitionTo: (data: any) => void,\n    children: { trigger: (data: any) => void },\n    unused: {}\n}\n\nclass ZoomViewTrigger extends React.Component<Props> {\n    _ele: React.Component<Props, React.ComponentState>\n\n    render() {\n        return (\n            <View ref={ele => (this._ele = ele)}>\n                {this.props.children({ trigger: this._trigger })}\n            </View>\n        )\n    }\n\n    _trigger = (data: { [key: string]: any }) => {\n        this._ele.measure((_, __, width, height, x, y) => {\n            // this.props.transitionTo(data)\n            this.props.transitionTo({ x, y, width, height, data })\n        })\n    }\n}\n\nexport default ZoomViewTrigger\n"}]}]}]